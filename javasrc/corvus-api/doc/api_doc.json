{
    "swagger": "2.0",
    "info": {
        "title": "Hermes RESTful API",
        "description": "Access Hermes functionalities using RESTful API.",
        "version": "1.0.0"
    },
    "host": "hermes_install_host",
    "schemes": [
        "http"
    ],
    "basePath": "/corvus/api",
    "produces": [
        "application/vnd.api+json"
    ],
    "paths": {
        "/status": {
            "get": {
                "summary": "Query API server status",
                "description": "The status endpoint returns the health status of the API server.\nIt also returns the current timestamp and current version of the\nAPI server. No parameters are needed.\n",
                "tags": [
                    "Status"
                ],
                "responses": {
                    "200": {
                        "description": "Hermes API server status",
                        "schema": {
                            "$ref": "#/definitions/Status"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/partnership/ebms": {
            "get": {
                "summary": "Query ebMS partnership",
                "description": "The query ebMS partnership endpoint returns all partnerships set up\nin Hermes ebMS plugin.\n",
                "tags": [
                    "Partnership"
                ],
                "responses": {
                    "200": {
                        "description": "An array of partnership objects",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "partnerships": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Ebms_Partnership"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete an ebMS partnership",
                "description": "The delete ebMS partnership endpoint remove the specified partnership\nin Hermes ebMS plugin.\n",
                "tags": [
                    "Partnership"
                ],
                "responses": {
                    "200": {
                        "description": "Whether the deletion is successful or not",
                        "schema": {
                            "$ref": "#/definitions/ActionResult"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Create an ebMS partnership",
                "description": "The create ebMS partnership endpoint creates a partnership in Hermes\nserver using the parameters.\n",
                "tags": [
                    "Partnership"
                ],
                "parameters": [
                    {
                        "name": "partnership",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Ebms_Partnership"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A partnership ID",
                        "schema": {
                            "$ref": "#/definitions/Identifier"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/message/send/ebms": {
            "post": {
                "summary": "Send an ebMS message",
                "description": "The send ebMS message endpoint requests Hermes server to send a message.\nThe message should have its parameters fitting a valid partnership configured\nat Hermes server before sending.\n",
                "tags": [
                    "Message",
                    "Send"
                ],
                "parameters": [
                    {
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EbmsMessageSendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The same message ID that is passed in with the message.",
                        "schema": {
                            "$ref": "#/definitions/Identifier"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "Query for the status of a ebMS message sending request",
                "description": "The query ebMS message status endpoints queries for the status of a previous\nmessage sending request.\n",
                "tags": [
                    "Message",
                    "Send"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message ID and status",
                        "schema": {
                            "$ref": "#/definitions/MessageSendStatus"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/message/history/ebms": {
            "get": {
                "summary": "Get ebMS message history",
                "description": "The get ebMS message history API queries for messages which\nmatch the passed in query parameters.\n",
                "tags": [
                    "Message",
                    "History"
                ],
                "parameters": [
                    {
                        "name": "message_id",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "message_box",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "conversation_id",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cpa_id",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "service",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "action",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of message IDs, which identifies a list of messages\nmatching the passed in query parameters.\n",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message_ids": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ReceivedMessageIdentifier"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Reset message delivery status",
                "description": "The reset message status API resets a message's status to\nundelivered. Note that the only support action is 'reset'.\n",
                "tags": [
                    "Message",
                    "History"
                ],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MessageStatusReset"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Whether the deletion is successful or not",
                        "schema": {
                            "$ref": "#/definitions/ActionResult"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/message/receive/ebms": {
            "get": {
                "summary": "Get a list of received ebMS message",
                "description": "The get unread ebMS messages endpoints queries for the list of\nmessages that has been received for the specified partnership.\nIf the parameter include_read is true, only unread messages\nwill be returned.\n",
                "tags": [
                    "Message",
                    "Receive"
                ],
                "parameters": [
                    {
                        "name": "partnership_id",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "include_read",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of message IDs, which identifies a list received\nmessages for the specified partnership. Note that upon query,\nthe list of returned messages will be marked as read; which means\nit will not be returned next time the same endpoint is invoked\nunless include_read parameter is true.\n",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message_ids": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ReceivedMessageIdentifier"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Get ebMS message by identifier",
                "description": "The get ebMS message by identifier endpoint queries Hermes server for the ebMS \nmessage identified by the specified identifier.\n",
                "tags": [
                    "Message",
                    "Receive"
                ],
                "parameters": [
                    {
                        "name": "message_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Identifier"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The message identified by the specified identifier",
                        "schema": {
                            "$ref": "#/definitions/EbmsReceivedMessage"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Ebms_Partnership": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique ID of partnership."
                },
                "cpa_id": {
                    "type": "string",
                    "description": "CPA ID field in ebMS contract."
                },
                "service": {
                    "type": "string",
                    "description": "Service field in ebMS contract."
                },
                "action": {
                    "type": "string",
                    "description": "Action field in ebMS contract."
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Whether this partnership is disabled."
                },
                "transport_endpoint": {
                    "type": "string",
                    "description": "Transport endpoint of the partnership."
                },
                "ack_requested": {
                    "type": "string",
                    "description": "Whether acknowledgement is required."
                },
                "signed_ack_requested": {
                    "type": "string",
                    "description": "Whether signed acknowledgement is required."
                },
                "duplicate_elimination": {
                    "type": "string",
                    "description": "Whether duplicate elimination is required."
                },
                "message_order": {
                    "type": "string",
                    "description": "Whether message order is guaranteed."
                },
                "retries": {
                    "type": "integer",
                    "description": "Number of retries for delivery."
                },
                "retry_interval": {
                    "type": "integer",
                    "description": "Number of seconds to wait until retry."
                },
                "sign_requested": {
                    "type": "boolean",
                    "description": "Whether digital signature is required."
                },
                "sign_certicate": {
                    "type": "string",
                    "format": "byte",
                    "description": "Base64 encoded string of the signing certificate."
                }
            }
        },
        "Identifier": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier"
                }
            }
        },
        "EbmsMessageSendRequest": {
            "type": "object",
            "properties": {
                "partnership_id": {
                    "type": "string",
                    "description": "ID of partnership to refer to for the message to be sent."
                },
                "from_party_id": {
                    "type": "string",
                    "description": "From Party ID of the message to be sent."
                },
                "to_party_id": {
                    "type": "string",
                    "description": "From Party ID of the message to be sent."
                },
                "conversation_id": {
                    "type": "string",
                    "description": "Conversation ID of the message to be sent."
                },
                "payload": {
                    "type": "string",
                    "description": "Payload to be attached with the message, should be Base64 encoded."
                }
            }
        },
        "EbmsReceivedMessage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Message ID of the message received."
                },
                "cpa_id": {
                    "type": "string",
                    "description": "CPA ID of the message received."
                },
                "service": {
                    "type": "string",
                    "description": "Service of the message received."
                },
                "action": {
                    "type": "string",
                    "description": "Action of the message received."
                },
                "from_party_id": {
                    "type": "string",
                    "description": "From Party ID of the message received."
                },
                "to_party_id": {
                    "type": "string",
                    "description": "From Party ID of the message received."
                },
                "conversation_id": {
                    "type": "string",
                    "description": "Conversation ID of the message received."
                },
                "timestamp": {
                    "type": "integer",
                    "description": "Message timestamp (Unix timestamp)."
                },
                "status": {
                    "type": "string",
                    "description": "Status of the message received."
                },
                "payloads": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Payload"
                    },
                    "description": "Payload to be attached with the message, should be Base64 encoded."
                }
            }
        },
        "MessageSendStatus": {
            "type": "object",
            "properties": {
                "message_id": {
                    "type": "string",
                    "description": "Message ID"
                },
                "status": {
                    "type": "string",
                    "description": "Send status of the message"
                }
            }
        },
        "MessageStatusReset": {
            "type": "object",
            "properties": {
                "message_id": {
                    "type": "string",
                    "description": "Message ID"
                },
                "action": {
                    "type": "string",
                    "description": "Action to be taken to the message (only support 'reset' now)"
                }
            }
        },
        "ReceivedMessageIdentifier": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Message ID"
                },
                "timestamp": {
                    "type": "integer",
                    "description": "Message timestamp (Unix timestamp)"
                },
                "status": {
                    "type": "string",
                    "description": "Message status"
                }
            }
        },
        "ActionResult": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID"
                },
                "success": {
                    "type": "boolean",
                    "description": "Whether the action requested is success"
                }
            }
        },
        "Payload": {
            "type": "object",
            "properties": {
                "payload": {
                    "type": "string",
                    "description": "Payload to attached with the message, Base64 encoded."
                }
            }
        },
        "Status": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Current status of Hermes API server."
                },
                "server_time": {
                    "type": "integer",
                    "description": "Current datetime in Hermes server (Unix timestamp)"
                }
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}
